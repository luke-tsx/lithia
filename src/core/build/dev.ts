import { TsconfigPathsPlugin } from '@esbuild-plugins/tsconfig-paths';
import esbuild from 'esbuild';
import { Lithia, Route } from 'lithia/types';
import path from 'path';
import { getOutputPath } from '../_utils';
import { scanServerRoutes } from '../scan';
import { createRoutesManifest } from '../server/router';

/**
 * Builds individual route files for production.
 * @param {Lithia} lithia - The Lithia instance containing app configuration.
 * @param {Route[]} routes - An array of route objects to be built.
 * @returns {Promise<void>}
 */
async function buildRouteFiles(lithia: Lithia, routes: Route[]): Promise<void> {
  await Promise.all(
    routes.map(async (route) => {
      const outputDir = path.dirname(getOutputPath(lithia, route.filePath));

      await esbuild.build({
        entryPoints: [route.filePath],
        bundle: true,
        outdir: outputDir,
        platform: 'node',
        format: 'esm',
        packages: 'external',
        sourcemap: false,
        minify: false,
        keepNames: false,
        splitting: false,
        plugins: [
          TsconfigPathsPlugin({
            tsconfig: path.join(process.cwd(), 'tsconfig.json'),
          }),
        ],
        banner: {
          js: generateRouteBanner(route),
        },
      });
    }),
  );
}

/**
 * Generates a banner comment for route files.
 * @param {Route} route - The route object containing metadata.
 * @returns {string} - A formatted banner comment.
 */
function generateRouteBanner(route: Route): string {
  return `
/**
 * @DEV
 * 
 * This file was generated by Lithia.
 * Do not edit this file directly.
 * 
 * Learn more at https://lithiajs.com
 * 
 * Route {
 *  env: ${route.env || 'all'}
 *  path: ${route.path}
 *  method: ${route.method || 'all'}
 *  dynamic: ${route.dynamic}
 * }
 * */
`;
}

/**
 * Builds the entire Lithia app for production.
 * @param {Lithia} lithia - The Lithia instance containing app configuration.
 * @returns {Promise<void>}
 */
export async function buildDev(lithia: Lithia): Promise<void> {
  try {
    const routes = await scanServerRoutes(lithia);
    await Promise.all([buildRouteFiles(lithia, routes)]);
    await createRoutesManifest(lithia, routes);
  } catch (error) {
    console.error('Error during production build:', error);
    process.exit(1);
  }
}
