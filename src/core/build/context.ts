import { Lithia, Route } from 'lithia/types';
import { BuildModeConfig } from './modes';

/**
 * Build configuration options for esbuild.
 *
 * @interface
 */
export interface BuildConfig {
  /** Whether to generate source maps */
  sourcemap: boolean;
  /** Whether to minify the output */
  minify: boolean;
  /** Whether to keep function names */
  keepNames: boolean;
  /** Output format */
  format: 'cjs' | 'esm' | 'iife';
  /** Target platform */
  platform: 'node' | 'browser' | 'neutral';
  /** How to handle packages */
  packages: 'external' | 'bundle';
  /** Whether to bundle dependencies */
  bundle: boolean;
  /** Build mode configuration */
  mode: BuildModeConfig;
}

/**
 * Build environment type.
 *
 * @type
 */
export type BuildEnvironment = 'development' | 'production';

/**
 * Build result containing metadata about the build process.
 *
 * @interface
 */
export interface BuildResult {
  /** Whether the build was successful */
  success: boolean;
  /** Number of routes built */
  routesBuilt: number;
  /** Total build time in milliseconds */
  buildTime: number;
  /** Any errors that occurred during build */
  errors: Error[];
  /** Build environment used */
  environment: BuildEnvironment;
}

/**
 * Build context containing all information needed for building.
 *
 * This class encapsulates the build environment, configuration, and provides
 * utilities for build operations. It serves as the central context for all
 * build-related operations.
 *
 * @class
 */
export class BuildContext {
  public readonly environment: BuildEnvironment;
  public readonly config: BuildConfig;
  public readonly routes: Route[];
  public readonly startTime: number;

  /**
   * Creates a new BuildContext instance.
   *
   * @param lithia - The Lithia instance containing configuration
   * @param routes - Array of routes to build
   * @param environment - Build environment (development or production)
   */
  constructor(
    public readonly lithia: Lithia,
    routes: Route[],
    environment: BuildEnvironment = 'development',
  ) {
    this.environment = environment;
    this.routes = routes;
    this.startTime = Date.now();
    this.config = this.createBuildConfig(environment);
  }

  /**
   * Creates build configuration based on environment.
   *
   * @private
   * @param environment - The build environment
   * @returns Build configuration object
   */
  private createBuildConfig(environment: BuildEnvironment): BuildConfig {
    const isProduction = environment === 'production';
    const buildConfig = this.lithia.options.build;

    return {
      sourcemap: !isProduction,
      minify: isProduction,
      keepNames: true,
      format: 'cjs',
      platform: 'node',
      packages: 'external',
      bundle: buildConfig.mode === 'full-bundle',
      mode: {
        mode: buildConfig.mode,
        externalPackages: buildConfig.externalPackages,
        optimize: buildConfig.optimize || isProduction,
      },
    };
  }

  /**
   * Gets the banner text for route files.
   *
   * @param route - The route to generate banner for
   * @returns Formatted banner string
   */
  getRouteBanner(route: Route): string {
    const envTag = this.environment === 'production' ? 'PROD' : 'DEV';

    return `
/**
 * @${envTag}
 * 
 * This file was generated by Lithia.
 * Do not edit this file directly.
 * 
 * Learn more at https://lithiajs.com
 * 
 * Route {
 *  env: ${route.env || 'all'}
 *  path: ${route.path}
 *  method: ${route.method || 'all'}
 *  dynamic: ${route.dynamic}
 * }
 * */`;
  }

  /**
   * Calculates build duration.
   *
   * @returns Build duration in milliseconds
   */
  getBuildDuration(): number {
    return Date.now() - this.startTime;
  }

  /**
   * Creates a build result object.
   *
   * @param success - Whether the build was successful
   * @param errors - Any errors that occurred
   * @returns Build result object
   */
  createBuildResult(success: boolean, errors: Error[] = []): BuildResult {
    return {
      success,
      routesBuilt: this.routes.length,
      buildTime: this.getBuildDuration(),
      errors,
      environment: this.environment,
    };
  }

  /**
   * Checks if this is a production build.
   *
   * @returns True if this is a production build
   */
  isProduction(): boolean {
    return this.environment === 'production';
  }

  /**
   * Checks if this is a development build.
   *
   * @returns True if this is a development build
   */
  isDevelopment(): boolean {
    return this.environment === 'development';
  }
}
